// Copyright 2016 Mender Software AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
package mocks

import inv "github.com/mendersoftware/inventory/inv"
import mock "github.com/stretchr/testify/mock"
import model "github.com/mendersoftware/inventory/model"
import store "github.com/mendersoftware/inventory/store"

// InventoryApp is an autogenerated mock type for the InventoryApp type
type InventoryApp struct {
	mock.Mock
}

// AddDevice provides a mock function with given fields: d
func (_m *InventoryApp) AddDevice(d *model.Device) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Device) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDevice provides a mock function with given fields: id
func (_m *InventoryApp) DeleteDevice(id model.DeviceID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.DeviceID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDevice provides a mock function with given fields: id
func (_m *InventoryApp) GetDevice(id model.DeviceID) (*model.Device, error) {
	ret := _m.Called(id)

	var r0 *model.Device
	if rf, ok := ret.Get(0).(func(model.DeviceID) *model.Device); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.DeviceID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceGroup provides a mock function with given fields: id
func (_m *InventoryApp) GetDeviceGroup(id model.DeviceID) (model.GroupName, error) {
	ret := _m.Called(id)

	var r0 model.GroupName
	if rf, ok := ret.Get(0).(func(model.DeviceID) model.GroupName); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.GroupName)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.DeviceID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDevices provides a mock function with given fields: skip, limit, filters, sort, hasGroup
func (_m *InventoryApp) ListDevices(skip int, limit int, filters []store.Filter, sort *store.Sort, hasGroup *bool) ([]model.Device, error) {
	ret := _m.Called(skip, limit, filters, sort, hasGroup)

	var r0 []model.Device
	if rf, ok := ret.Get(0).(func(int, int, []store.Filter, *store.Sort, *bool) []model.Device); ok {
		r0 = rf(skip, limit, filters, sort, hasGroup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, []store.Filter, *store.Sort, *bool) error); ok {
		r1 = rf(skip, limit, filters, sort, hasGroup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDevicesByGroup provides a mock function with given fields: group, skip, limit
func (_m *InventoryApp) ListDevicesByGroup(group model.GroupName, skip int, limit int) ([]model.DeviceID, error) {
	ret := _m.Called(group, skip, limit)

	var r0 []model.DeviceID
	if rf, ok := ret.Get(0).(func(model.GroupName, int, int) []model.DeviceID); ok {
		r0 = rf(group, skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.DeviceID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.GroupName, int, int) error); ok {
		r1 = rf(group, skip, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroups provides a mock function with given fields:
func (_m *InventoryApp) ListGroups() ([]model.GroupName, error) {
	ret := _m.Called()

	var r0 []model.GroupName
	if rf, ok := ret.Get(0).(func() []model.GroupName); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.GroupName)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnsetDeviceGroup provides a mock function with given fields: id, groupName
func (_m *InventoryApp) UnsetDeviceGroup(id model.DeviceID, groupName model.GroupName) error {
	ret := _m.Called(id, groupName)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.DeviceID, model.GroupName) error); ok {
		r0 = rf(id, groupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeviceGroup provides a mock function with given fields: id, group
func (_m *InventoryApp) UpdateDeviceGroup(id model.DeviceID, group model.GroupName) error {
	ret := _m.Called(id, group)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.DeviceID, model.GroupName) error); ok {
		r0 = rf(id, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertAttributes provides a mock function with given fields: id, attrs
func (_m *InventoryApp) UpsertAttributes(id model.DeviceID, attrs model.DeviceAttributes) error {
	ret := _m.Called(id, attrs)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.DeviceID, model.DeviceAttributes) error); ok {
		r0 = rf(id, attrs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

var _ inv.InventoryApp = (*InventoryApp)(nil)
